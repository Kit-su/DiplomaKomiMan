{"expireTime":9007200971572806000,"key":"transformer-remark-markdown-ast-fa04f6a1e7024c6040bd87e90397f0ad-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Two-Opt inversion","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This algorithm is also known as 2-opt, 2-opt mutation, and cross-aversion. The general goal is to find places where the path crosses over itself, and then \"undo\" that crossing. It repeats until there are no crossings. A characteristic of this algorithm is that afterwards the path is guaranteed to have no crossings.","position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":317,"offset":338},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":317,"offset":338},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"While a better path has not been found.","position":{"start":{"line":6,"column":4,"offset":343},"end":{"line":6,"column":43,"offset":382},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":343},"end":{"line":6,"column":43,"offset":382},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":340},"end":{"line":6,"column":43,"offset":382},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For each pair of points:","position":{"start":{"line":7,"column":4,"offset":386},"end":{"line":7,"column":28,"offset":410},"indent":[]}}],"position":{"start":{"line":7,"column":4,"offset":386},"end":{"line":7,"column":28,"offset":410},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":383},"end":{"line":7,"column":28,"offset":410},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reverse the path between the selected points.","position":{"start":{"line":8,"column":4,"offset":414},"end":{"line":8,"column":49,"offset":459},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":414},"end":{"line":8,"column":49,"offset":459},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":411},"end":{"line":8,"column":49,"offset":459},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If the new path is cheaper (shorter), keep it and continue searching. Remember that we found a better path.","position":{"start":{"line":9,"column":4,"offset":463},"end":{"line":9,"column":111,"offset":570},"indent":[]}}],"position":{"start":{"line":9,"column":4,"offset":463},"end":{"line":9,"column":111,"offset":570},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":460},"end":{"line":9,"column":111,"offset":570},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If not, revert the path and continue searching.","position":{"start":{"line":10,"column":4,"offset":574},"end":{"line":10,"column":51,"offset":621},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":574},"end":{"line":10,"column":51,"offset":621},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":571},"end":{"line":10,"column":51,"offset":621},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":340},"end":{"line":10,"column":51,"offset":621},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementation","position":{"start":{"line":12,"column":4,"offset":626},"end":{"line":12,"column":18,"offset":640},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":623},"end":{"line":12,"column":18,"offset":640},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoOptInversion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> best <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>swapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1 <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt2 <span class=\"token operator\">=</span> pt1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2 <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// section of the path to reverse</span>\n        <span class=\"token keyword\">const</span> section <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">,</span> pt2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// reverse section in place</span>\n        section<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// replace section of path with reversed section in place</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">,</span> pt2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> pt1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>section<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// calculate new cost</span>\n        <span class=\"token keyword\">const</span> newPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>newPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// found a better path after the swap, keep it</span>\n          swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          best <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\n          self<span class=\"token punctuation\">.</span><span class=\"token function\">setBestPath</span><span class=\"token punctuation\">(</span>newPath<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// un-reverse the section</span>\n          section<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">,</span> pt2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> pt1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>section<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":14,"column":1,"offset":642},"end":{"line":51,"column":4,"offset":1652},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":52,"column":1,"offset":1653}}}}