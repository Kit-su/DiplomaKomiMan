{"expireTime":9007200971572806000,"key":"transformer-remark-markdown-ast-1e0a64fe51318874a2d110f337f8f327-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Two-Opt Reciprocal Exchange","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":30,"offset":30},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":30,"offset":30},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This algorithm is similar to the 2-opt mutation or inversion algorithm, although generally will find a less optimal path. However, the computational cost of calculating new solutions is less intensive.","position":{"start":{"line":4,"column":1,"offset":32},"end":{"line":4,"column":202,"offset":233},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":32},"end":{"line":4,"column":202,"offset":233},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The big difference with 2-opt mutation is not reversing the path between the 2 points. This algorithm is ","position":{"start":{"line":6,"column":1,"offset":235},"end":{"line":6,"column":106,"offset":340},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":6,"column":108,"offset":342},"end":{"line":6,"column":111,"offset":345},"indent":[]}}],"position":{"start":{"line":6,"column":106,"offset":340},"end":{"line":6,"column":113,"offset":347},"indent":[]}},{"type":"text","value":" always going to find a path that doesn't cross itself.","position":{"start":{"line":6,"column":113,"offset":347},"end":{"line":6,"column":168,"offset":402},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":235},"end":{"line":6,"column":168,"offset":402},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It could be worthwhile to try this algorithm prior to 2-opt inversion because of the cheaper cost of calculation, but probably not.","position":{"start":{"line":8,"column":1,"offset":404},"end":{"line":8,"column":132,"offset":535},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":404},"end":{"line":8,"column":132,"offset":535},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"While a better path has not been found.","position":{"start":{"line":10,"column":4,"offset":540},"end":{"line":10,"column":43,"offset":579},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":540},"end":{"line":10,"column":43,"offset":579},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":537},"end":{"line":10,"column":43,"offset":579},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For each pair of points:","position":{"start":{"line":11,"column":4,"offset":583},"end":{"line":11,"column":28,"offset":607},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":583},"end":{"line":11,"column":28,"offset":607},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":580},"end":{"line":11,"column":28,"offset":607},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Swap the points in the path. That is, go to point B before point A, continue along the same path, and go to point A where point B was.","position":{"start":{"line":12,"column":4,"offset":611},"end":{"line":12,"column":138,"offset":745},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":611},"end":{"line":12,"column":138,"offset":745},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":608},"end":{"line":12,"column":138,"offset":745},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If the new path is cheaper (shorter), keep it and continue searching. Remember that we found a better path.","position":{"start":{"line":13,"column":4,"offset":749},"end":{"line":13,"column":111,"offset":856},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":749},"end":{"line":13,"column":111,"offset":856},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":746},"end":{"line":13,"column":111,"offset":856},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If not, revert the path and continue searching.","position":{"start":{"line":14,"column":4,"offset":860},"end":{"line":14,"column":51,"offset":907},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":860},"end":{"line":14,"column":51,"offset":907},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":857},"end":{"line":14,"column":51,"offset":907},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":537},"end":{"line":14,"column":51,"offset":907},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementation","position":{"start":{"line":16,"column":4,"offset":912},"end":{"line":16,"column":18,"offset":926},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":909},"end":{"line":16,"column":18,"offset":926},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoOptReciprocalExchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> best <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  self<span class=\"token punctuation\">.</span><span class=\"token function\">setBestPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>swapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1 <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt2 <span class=\"token operator\">=</span> pt1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2 <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// swap current pair of points</span>\n        <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// calculate new cost</span>\n        <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// found a better path after the swap, keep it</span>\n          swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          best <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// swap back - this one's worse</span>\n          <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":928},"end":{"line":48,"column":4,"offset":1705},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":49,"column":1,"offset":1706}}}}