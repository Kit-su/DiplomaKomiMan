{"expireTime":9007200971572806000,"key":"transformer-remark-markdown-ast-82d4ab7268f92cbcb6c57d0c747d0c68-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Depth First Search (Brute Force)","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":35,"offset":35},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":35,"offset":35},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an exhaustive, brute-force algorithm. It is guaranteed to find the best possible path, however depending on the number of points in the traveling salesman problem it is likely impractical. For example,","position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":4,"column":210,"offset":246},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":4,"column":210,"offset":246},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With 10 points there are 181,400 paths to evaluate.","position":{"start":{"line":6,"column":3,"offset":250},"end":{"line":6,"column":54,"offset":301},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":250},"end":{"line":6,"column":54,"offset":301},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":248},"end":{"line":6,"column":54,"offset":301},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With 11 points, there are 1,814,000.","position":{"start":{"line":7,"column":3,"offset":304},"end":{"line":7,"column":39,"offset":340},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":304},"end":{"line":7,"column":39,"offset":340},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":302},"end":{"line":7,"column":39,"offset":340},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With 12 points there are 19,960,000.","position":{"start":{"line":8,"column":3,"offset":343},"end":{"line":8,"column":39,"offset":379},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":343},"end":{"line":8,"column":39,"offset":379},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":341},"end":{"line":8,"column":39,"offset":379},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With 20 points there are 60,820,000,000,000,000, give or take.","position":{"start":{"line":9,"column":3,"offset":382},"end":{"line":9,"column":65,"offset":444},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":382},"end":{"line":9,"column":65,"offset":444},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":380},"end":{"line":9,"column":65,"offset":444},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With 25 points there are 310,200,000,000,000,000,000,000, give or take.","position":{"start":{"line":10,"column":3,"offset":447},"end":{"line":10,"column":74,"offset":518},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":447},"end":{"line":10,"column":74,"offset":518},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":445},"end":{"line":10,"column":74,"offset":518},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":248},"end":{"line":10,"column":74,"offset":518},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is factorial growth, and it quickly makes the TSP impractical to brute force. That is why heuristics exist to give a good approximation of the best path, but it is very difficult to determine without a doubt what the best path is for a reasonably sized traveling salesman problem.","position":{"start":{"line":12,"column":1,"offset":520},"end":{"line":12,"column":286,"offset":805},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":520},"end":{"line":12,"column":286,"offset":805},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a recursive, depth-first-search algorithm, as follows:","position":{"start":{"line":14,"column":1,"offset":807},"end":{"line":14,"column":63,"offset":869},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":807},"end":{"line":14,"column":63,"offset":869},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"From the starting point","position":{"start":{"line":16,"column":4,"offset":874},"end":{"line":16,"column":27,"offset":897},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":874},"end":{"line":16,"column":27,"offset":897},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":871},"end":{"line":16,"column":27,"offset":897},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For all other points not visited","position":{"start":{"line":17,"column":4,"offset":901},"end":{"line":17,"column":36,"offset":933},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":901},"end":{"line":17,"column":36,"offset":933},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":898},"end":{"line":17,"column":36,"offset":933},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If there are no points left return the current cost/path","position":{"start":{"line":18,"column":4,"offset":937},"end":{"line":18,"column":60,"offset":993},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":937},"end":{"line":18,"column":60,"offset":993},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":934},"end":{"line":18,"column":60,"offset":993},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Else, go to every remaining point and","position":{"start":{"line":19,"column":4,"offset":997},"end":{"line":19,"column":41,"offset":1034},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":997},"end":{"line":19,"column":41,"offset":1034},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":994},"end":{"line":19,"column":41,"offset":1034},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":871},"end":{"line":19,"column":41,"offset":1034},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":":","position":{"start":{"line":21,"column":1,"offset":1036},"end":{"line":21,"column":2,"offset":1037},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1036},"end":{"line":21,"column":2,"offset":1037},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Mark that point as visited","position":{"start":{"line":23,"column":4,"offset":1042},"end":{"line":23,"column":30,"offset":1068},"indent":[]}}],"position":{"start":{"line":23,"column":4,"offset":1042},"end":{"line":23,"column":30,"offset":1068},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1039},"end":{"line":23,"column":30,"offset":1068},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"","position":{"start":{"line":24,"column":4,"offset":1072},"end":{"line":24,"column":5,"offset":1073},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"recurse","position":{"start":{"line":24,"column":7,"offset":1075},"end":{"line":24,"column":14,"offset":1082},"indent":[]}}],"position":{"start":{"line":24,"column":5,"offset":1073},"end":{"line":24,"column":16,"offset":1084},"indent":[]}},{"type":"text","value":"\" through those paths (go back to 1. )","position":{"start":{"line":24,"column":16,"offset":1084},"end":{"line":24,"column":54,"offset":1122},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":1072},"end":{"line":24,"column":54,"offset":1122},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1069},"end":{"line":24,"column":54,"offset":1122},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1039},"end":{"line":24,"column":54,"offset":1122},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementation","position":{"start":{"line":26,"column":4,"offset":1127},"end":{"line":26,"column":18,"offset":1141},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1124},"end":{"line":26,"column":18,"offset":1141},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">points<span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> overallBest <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial call</span>\n    path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// figure out what points are left from this point</span>\n  <span class=\"token keyword\">const</span> available <span class=\"token operator\">=</span> <span class=\"token function\">setDifference</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this must be a complete path</span>\n    <span class=\"token keyword\">const</span> backToStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// calculate the cost of this path</span>\n    <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>backToStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return both the cost and the path where we're at</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> backToStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for every point yet to be visited along this path</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// go to that point</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// RECURSE - go through all the possible points from that point</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> overallBest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if that path is better, keep it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bestCost <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> curCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overallBest <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bestCost <span class=\"token operator\">&lt;</span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// found a new best complete path</span>\n        overallBest <span class=\"token operator\">=</span> bestCost<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// go back up and make that point available again</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":28,"column":1,"offset":1143},"end":{"line":78,"column":4,"offset":2524},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":79,"column":1,"offset":2525}}}}