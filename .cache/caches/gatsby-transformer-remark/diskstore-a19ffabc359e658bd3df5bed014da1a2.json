{"expireTime":9007200971572807000,"key":"transformer-remark-markdown-html-ast-61c02dccb1f7d882df3726a55c014265-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Convex Hull","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":14,"offset":14}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":14,"offset":14}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is a heuristic construction algorithm. It starts by building the ","position":{"start":{"line":4,"column":1,"offset":16},"end":{"line":4,"column":71,"offset":86}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Convex_hull"},"children":[{"type":"text","value":"convex hull","position":{"start":{"line":4,"column":72,"offset":87},"end":{"line":4,"column":83,"offset":98}}}],"position":{"start":{"line":4,"column":71,"offset":86},"end":{"line":4,"column":127,"offset":142}}},{"type":"text","value":", and adding interior points from there. This implmentation uses another heuristic for insertion based on the ratio of the cost of adding the new point to the overall length of the segment, however any insertion algorithm could be applied after building the hull.","position":{"start":{"line":4,"column":127,"offset":142},"end":{"line":4,"column":390,"offset":405}}}],"position":{"start":{"line":4,"column":1,"offset":16},"end":{"line":4,"column":390,"offset":405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are a number of algorithms to determine the convex hull. This implementation uses the ","position":{"start":{"line":6,"column":1,"offset":407},"end":{"line":6,"column":93,"offset":499}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Gift_wrapping_algorithm"},"children":[{"type":"text","value":"gift wrapping algorithm","position":{"start":{"line":6,"column":94,"offset":500},"end":{"line":6,"column":117,"offset":523}}}],"position":{"start":{"line":6,"column":93,"offset":499},"end":{"line":6,"column":173,"offset":579}}},{"type":"text","value":".","position":{"start":{"line":6,"column":173,"offset":579},"end":{"line":6,"column":174,"offset":580}}}],"position":{"start":{"line":6,"column":1,"offset":407},"end":{"line":6,"column":174,"offset":580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In essence, the steps are:","position":{"start":{"line":8,"column":1,"offset":582},"end":{"line":8,"column":27,"offset":608}}}],"position":{"start":{"line":8,"column":1,"offset":582},"end":{"line":8,"column":27,"offset":608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Determine the leftmost point","position":{"start":{"line":10,"column":4,"offset":613},"end":{"line":10,"column":32,"offset":641}}}],"position":{"start":{"line":10,"column":1,"offset":610},"end":{"line":10,"column":32,"offset":641}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Continually add the most counterclockwise point until the convex hull is formed","position":{"start":{"line":11,"column":4,"offset":645},"end":{"line":11,"column":83,"offset":724}}}],"position":{"start":{"line":11,"column":1,"offset":642},"end":{"line":11,"column":83,"offset":724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"For each remaining point p, find the segment i => j in the hull that minimizes cost(i -> p) + cost(p -> j) - cost(i -> j)","position":{"start":{"line":12,"column":4,"offset":728},"end":{"line":12,"column":125,"offset":849}}}],"position":{"start":{"line":12,"column":1,"offset":725},"end":{"line":12,"column":125,"offset":849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Of those, choose p that minimizes cost(i -> p -> j) / cost(i -> j)","position":{"start":{"line":13,"column":4,"offset":853},"end":{"line":13,"column":70,"offset":919}}}],"position":{"start":{"line":13,"column":1,"offset":850},"end":{"line":13,"column":70,"offset":919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Add p to the path between i and j","position":{"start":{"line":14,"column":4,"offset":923},"end":{"line":14,"column":37,"offset":956}}}],"position":{"start":{"line":14,"column":1,"offset":920},"end":{"line":14,"column":37,"offset":956}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Repeat from #3 until there are no remaining points","position":{"start":{"line":15,"column":4,"offset":960},"end":{"line":15,"column":54,"offset":1010}}}],"position":{"start":{"line":15,"column":1,"offset":957},"end":{"line":15,"column":54,"offset":1010}}},{"type":"text","value":"\n"}],"position":{"start":{"line":10,"column":1,"offset":610},"end":{"line":15,"column":54,"offset":1010}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Implementation","position":{"start":{"line":17,"column":4,"offset":1015},"end":{"line":17,"column":18,"offset":1029}}}],"position":{"start":{"line":17,"column":1,"offset":1012},"end":{"line":17,"column":18,"offset":1029}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convexHull</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">points</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sp <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Find the \"left most point\"</span>\n  <span class=\"token keyword\">let</span> leftmost <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> leftmost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      leftmost <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>leftmost<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> curPoint <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">,</span> selectedPoint<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// find the \"most counterclockwise\" point</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selectedPoint <span class=\"token operator\">||</span> <span class=\"token function\">orientation</span><span class=\"token punctuation\">(</span>curPoint<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> selectedPoint<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// this point is counterclockwise with respect to the current hull</span>\n        <span class=\"token comment\">// and selected point (e.g. more counterclockwise)</span>\n        <span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">,</span> selectedPoint<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// adding this to the hull so it's no longer available</span>\n    points<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>selectedIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// back to the furthest left point, formed a cycle, break</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selectedPoint <span class=\"token operator\">===</span> leftmost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// add to hull</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>selectedPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestRatio<span class=\"token punctuation\">,</span> bestPointIdx<span class=\"token punctuation\">,</span> insertIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>freeIdx<span class=\"token punctuation\">,</span> freePoint<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// for every free point, find the point in the current path</span>\n      <span class=\"token comment\">// that minimizes the cost of adding the point minus the cost of</span>\n      <span class=\"token comment\">// the original segment</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>pathIdx<span class=\"token punctuation\">,</span> pathPoint<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> nextPathPoint <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>pathIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> path<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// the new cost minus the old cost</span>\n        <span class=\"token keyword\">const</span> evalCost <span class=\"token operator\">=</span>\n          <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pathPoint<span class=\"token punctuation\">,</span> freePoint<span class=\"token punctuation\">,</span> nextPathPoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n          <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pathPoint<span class=\"token punctuation\">,</span> nextPathPoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>evalCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>evalCost<span class=\"token punctuation\">,</span> pathIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// figure out how \"much\" more expensive this is with respect to the</span>\n      <span class=\"token comment\">// overall length of the segment</span>\n      <span class=\"token keyword\">const</span> nextPoint <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>bestIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> path<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> prevCost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>bestIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nextPoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> newCost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>bestIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> freePoint<span class=\"token punctuation\">,</span> nextPoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> ratio <span class=\"token operator\">=</span> newCost <span class=\"token operator\">/</span> prevCost<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&lt;</span> bestRatio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>bestRatio<span class=\"token punctuation\">,</span> bestPointIdx<span class=\"token punctuation\">,</span> insertIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ratio<span class=\"token punctuation\">,</span> freeIdx<span class=\"token punctuation\">,</span> bestIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nextPoint<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>bestPointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>insertIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nextPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// rotate the array so that starting point is back first</span>\n  <span class=\"token keyword\">const</span> startIdx <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p <span class=\"token operator\">===</span> sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>startIdx<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// go back home</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":19,"column":1,"offset":1031},"end":{"line":102,"column":4,"offset":3586}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":1,"offset":3587}}}}