{"expireTime":9007200971572807000,"key":"transformer-remark-markdown-html-82d4ab7268f92cbcb6c57d0c747d0c68-gatsby-remark-prismjs-","val":"<h1>Depth First Search (Brute Force)</h1>\n<p>This is an exhaustive, brute-force algorithm. It is guaranteed to find the best possible path, however depending on the number of points in the traveling salesman problem it is likely impractical. For example,</p>\n<ul>\n<li>With 10 points there are 181,400 paths to evaluate.</li>\n<li>With 11 points, there are 1,814,000.</li>\n<li>With 12 points there are 19,960,000.</li>\n<li>With 20 points there are 60,820,000,000,000,000, give or take.</li>\n<li>With 25 points there are 310,200,000,000,000,000,000,000, give or take.</li>\n</ul>\n<p>This is factorial growth, and it quickly makes the TSP impractical to brute force. That is why heuristics exist to give a good approximation of the best path, but it is very difficult to determine without a doubt what the best path is for a reasonably sized traveling salesman problem.</p>\n<p>This is a recursive, depth-first-search algorithm, as follows:</p>\n<ol>\n<li>From the starting point</li>\n<li>For all other points not visited</li>\n<li>If there are no points left return the current cost/path</li>\n<li>Else, go to every remaining point and</li>\n</ol>\n<p>:</p>\n<ol>\n<li>Mark that point as visited</li>\n<li>\"<strong>recurse</strong>\" through those paths (go back to 1. )</li>\n</ol>\n<h2>Implementation</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">points<span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> overallBest <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial call</span>\n    path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// figure out what points are left from this point</span>\n  <span class=\"token keyword\">const</span> available <span class=\"token operator\">=</span> <span class=\"token function\">setDifference</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this must be a complete path</span>\n    <span class=\"token keyword\">const</span> backToStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// calculate the cost of this path</span>\n    <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>backToStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return both the cost and the path where we're at</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> backToStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for every point yet to be visited along this path</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// go to that point</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// RECURSE - go through all the possible points from that point</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> overallBest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if that path is better, keep it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bestCost <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> curCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overallBest <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bestCost <span class=\"token operator\">&lt;</span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// found a new best complete path</span>\n        overallBest <span class=\"token operator\">=</span> bestCost<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// go back up and make that point available again</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>"}