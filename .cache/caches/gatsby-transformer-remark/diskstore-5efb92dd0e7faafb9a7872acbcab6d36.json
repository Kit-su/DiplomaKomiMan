{"expireTime":9007200971572806000,"key":"transformer-remark-markdown-ast-b5fe3c97356c4c3771b22433efdc4263-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Furthest Insertion","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":21,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a heuristic construction algorithm. It selects the closest point to the path, and then figures out where the best place to put it will be.","position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":147,"offset":169},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":147,"offset":169},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"From the starting point","position":{"start":{"line":6,"column":4,"offset":174},"end":{"line":6,"column":27,"offset":197},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":174},"end":{"line":6,"column":27,"offset":197},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":171},"end":{"line":6,"column":27,"offset":197},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"First, go to the closest point","position":{"start":{"line":7,"column":4,"offset":201},"end":{"line":7,"column":34,"offset":231},"indent":[]}}],"position":{"start":{"line":7,"column":4,"offset":201},"end":{"line":7,"column":34,"offset":231},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":198},"end":{"line":7,"column":34,"offset":231},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Choose the point that is ","position":{"start":{"line":8,"column":4,"offset":235},"end":{"line":8,"column":29,"offset":260},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"nearest","position":{"start":{"line":8,"column":31,"offset":262},"end":{"line":8,"column":38,"offset":269},"indent":[]}}],"position":{"start":{"line":8,"column":29,"offset":260},"end":{"line":8,"column":40,"offset":271},"indent":[]}},{"type":"text","value":" to the current path","position":{"start":{"line":8,"column":40,"offset":271},"end":{"line":8,"column":60,"offset":291},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":235},"end":{"line":8,"column":60,"offset":291},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":232},"end":{"line":8,"column":60,"offset":291},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Find the cheapest place to add it in the path","position":{"start":{"line":9,"column":4,"offset":295},"end":{"line":9,"column":49,"offset":340},"indent":[]}}],"position":{"start":{"line":9,"column":4,"offset":295},"end":{"line":9,"column":49,"offset":340},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":292},"end":{"line":9,"column":49,"offset":340},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Chosen point is no longer an \"available point\"","position":{"start":{"line":10,"column":4,"offset":344},"end":{"line":10,"column":50,"offset":390},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":344},"end":{"line":10,"column":50,"offset":390},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":341},"end":{"line":10,"column":50,"offset":390},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Continue from #3 until there are no available points, and then return to the start.","position":{"start":{"line":11,"column":4,"offset":394},"end":{"line":11,"column":87,"offset":477},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":394},"end":{"line":11,"column":87,"offset":477},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":391},"end":{"line":11,"column":87,"offset":477},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":171},"end":{"line":11,"column":87,"offset":477},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementation","position":{"start":{"line":13,"column":4,"offset":482},"end":{"line":13,"column":18,"offset":496},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":479},"end":{"line":13,"column":18,"offset":496},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nearestInsertion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">points</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// from the starting point</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// INITIALIZATION - go to the nearest point first</span>\n  <span class=\"token comment\">//</span>\n  points<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// SELECTION - nearest point to the path</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>selectedDistance<span class=\"token punctuation\">,</span> selectedIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>freePointIdx<span class=\"token punctuation\">,</span> freePoint<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pathPoint <span class=\"token keyword\">of</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> dist <span class=\"token operator\">=</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>freePoint<span class=\"token punctuation\">,</span> pathPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist <span class=\"token operator\">&lt;</span> selectedDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token punctuation\">[</span>selectedDistance<span class=\"token punctuation\">,</span> selectedIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dist<span class=\"token punctuation\">,</span> freePointIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// get the next point to add</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nextPoint<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>selectedIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// INSERTION - find the insertion spot that minimizes distance</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> insertionCost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nextPoint<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>insertionCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>insertionCost<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>bestIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nextPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// return to start after visiting all other points</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":15,"column":1,"offset":498},"end":{"line":59,"column":4,"offset":1775},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":60,"column":1,"offset":1776}}}}