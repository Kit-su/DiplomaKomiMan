{"expireTime":9007200971572806000,"key":"transformer-remark-markdown-ast-09dd46ec93a1c372e1fc022af58ed000-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Random","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":9,"offset":9},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an impractical, albeit exhaustive algorithm. It is here only for demonstration purposes, but will not find a reasonable path for traveling salesman problems above 7 or 8 points.","position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":4,"column":186,"offset":196},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":4,"column":186,"offset":196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I consider it exhaustive because if it runs for infinity, eventually it will encounter every possible path.","position":{"start":{"line":6,"column":1,"offset":198},"end":{"line":6,"column":108,"offset":305},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":198},"end":{"line":6,"column":108,"offset":305},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"From the starting path","position":{"start":{"line":8,"column":4,"offset":310},"end":{"line":8,"column":26,"offset":332},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":310},"end":{"line":8,"column":26,"offset":332},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":307},"end":{"line":8,"column":26,"offset":332},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Randomly shuffle the path","position":{"start":{"line":9,"column":4,"offset":336},"end":{"line":9,"column":29,"offset":361},"indent":[]}}],"position":{"start":{"line":9,"column":4,"offset":336},"end":{"line":9,"column":29,"offset":361},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":333},"end":{"line":9,"column":29,"offset":361},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If it's better, keep it","position":{"start":{"line":10,"column":4,"offset":365},"end":{"line":10,"column":27,"offset":388},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":365},"end":{"line":10,"column":27,"offset":388},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":362},"end":{"line":10,"column":27,"offset":388},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If not, ditch it and keep going","position":{"start":{"line":11,"column":4,"offset":392},"end":{"line":11,"column":35,"offset":423},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":392},"end":{"line":11,"column":35,"offset":423},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":389},"end":{"line":11,"column":35,"offset":423},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":307},"end":{"line":11,"column":35,"offset":423},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementation","position":{"start":{"line":13,"column":4,"offset":428},"end":{"line":13,"column":18,"offset":442},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":425},"end":{"line":13,"column":18,"offset":442},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">random</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">points</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> best <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// save off the starting point</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// sort the remaining points</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// put the starting point back</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return to the starting point</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// calculate the new cost</span>\n    <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// we found a better path</span>\n      best <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// get rid of starting point at the end</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":15,"column":1,"offset":444},"end":{"line":44,"column":4,"offset":1028},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":45,"column":1,"offset":1029}}}}