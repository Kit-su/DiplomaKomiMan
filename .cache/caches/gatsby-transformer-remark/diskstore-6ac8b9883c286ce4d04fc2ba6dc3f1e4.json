{"expireTime":9007200971572807000,"key":"transformer-remark-markdown-html-4181bda29584a75830695304a5e19859-gatsby-remark-prismjs-","val":"<h1>Branch and Bound on Cost</h1>\n<p>This is a recursive algorithm, similar to depth first search, that is guaranteed to find the optimal solution.</p>\n<p>The candidate solution space is generated by systematically traversing possible paths, and discarding large subsets of fruitless candidates by comparing the current solution to an upper and lower bound. In this case, the upper bound is the best path found so far.</p>\n<p>While evaluating paths, if at any point the current solution is already more expensive (longer) than the best complete path discovered, there is no point continuing.</p>\n<p>For example, imagine:</p>\n<ol>\n<li>A -> B -> C -> D -> E -> A was already found with a cost of 100.</li>\n<li>We are evaluating A -> C -> E, which has a cost of 110. There is <strong>no point</strong> evaluating the remaining solutions.</li>\n<li>\n<p>Instead of continuing to evaluate all of the child solutions from here, we can go down a different path, eliminating candidates not worth evaluating:</p>\n<ul>\n<li><code class=\"language-text\">A -> C -> E -> D -> B -> A</code></li>\n<li><code class=\"language-text\">A -> C -> E -> B -> D -> A</code></li>\n</ul>\n</li>\n</ol>\n<p>Implementation is very similar to depth first search, with the exception that we cut paths that are already longer than the current best.</p>\n<h2>Implementation</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">branchAndBoundOnCost</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">points<span class=\"token punctuation\">,</span>\n  path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  visited <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  overallBest <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial call</span>\n    path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// figure out which points are left</span>\n  <span class=\"token keyword\">const</span> available <span class=\"token operator\">=</span> <span class=\"token function\">setDifference</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// calculate the cost, from here, to go home</span>\n  <span class=\"token keyword\">const</span> backToStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>backToStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">></span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we may not be done, but have already traveled further than the best path</span>\n    <span class=\"token comment\">// no reason to continue</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// still cheaper than the best, keep going deeper, and deeper, and deeper...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// at the end of the path, return where we're at</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> backToStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for every point yet to be visited along this path</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// go to that point</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// RECURSE - go through all the possible points from that point</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">branchAndBoundOnCost</span><span class=\"token punctuation\">(</span>\n      points<span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">,</span>\n      visited<span class=\"token punctuation\">,</span>\n      overallBest\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if that path is better and complete, keep it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curCost <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bestCost <span class=\"token operator\">||</span> curCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>overallBest <span class=\"token operator\">||</span> bestCost <span class=\"token operator\">&lt;</span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// found a new best complete path</span>\n        overallBest <span class=\"token operator\">=</span> bestCost<span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">setBestPath</span><span class=\"token punctuation\">(</span>bestPath<span class=\"token punctuation\">,</span> bestCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// go back up and make that point available again</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>"}