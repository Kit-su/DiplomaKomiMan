{"expireTime":9007200971572806000,"key":"transformer-remark-markdown-ast-b973e7efcd5ed4bf2a681f1035316da8-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Branch and Bound (Cost, Intersections)","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":41,"offset":41},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":41,"offset":41},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the same as branch and bound on cost, with an additional heuristic added to further minimize the search space.","position":{"start":{"line":4,"column":1,"offset":43},"end":{"line":4,"column":119,"offset":161},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":43},"end":{"line":4,"column":119,"offset":161},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While traversing paths, if at any point the path intersects (crosses over) itself, than backtrack and try the next way. It's been proven that an optimal path will never contain crossings.","position":{"start":{"line":6,"column":1,"offset":163},"end":{"line":6,"column":188,"offset":350},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":163},"end":{"line":6,"column":188,"offset":350},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Implementation is almost identical to branch and bound on cost only, with the added heuristic below:","position":{"start":{"line":8,"column":1,"offset":352},"end":{"line":8,"column":101,"offset":452},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":352},"end":{"line":8,"column":101,"offset":452},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementation","position":{"start":{"line":10,"column":4,"offset":457},"end":{"line":10,"column":18,"offset":471},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":454},"end":{"line":10,"column":18,"offset":471},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterClockWise</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>  <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> q<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>\n          <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">intersects</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">counterClockWise</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token function\">counterClockWise</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n         <span class=\"token function\">counterClockWise</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token function\">counterClockWise</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">branchAndBoundOnCostAndCross</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// .....</span>\n  <span class=\"token comment\">//</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if this newly added edge crosses over the existing path,</span>\n    <span class=\"token comment\">// don't continue. It's been proven that an optimal path will</span>\n    <span class=\"token comment\">// not cross itself.</span>\n    <span class=\"token keyword\">const</span> newSegment <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">intersects</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newSegment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// .....</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":12,"column":1,"offset":473},"end":{"line":47,"column":4,"offset":1294},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":48,"column":1,"offset":1295}}}}