{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/store/emitCustomEvent.js","webpack:///./src/store/actions.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./src/solvers/cost.js","webpack:///./src/constants.js","webpack:///./src/solvers/makeSolver.js","webpack:///./src/solvers/heuristic-construction/convexHull.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ev","window","dataLayer","push","console","log","SET_VIEWPORT_STATE","RESET_EVALUATING_STATE","RESET_BEST_PATH_STATE","SET_ALGORITHM","SET_DELAY","SET_EVALUATING_DETAIL_LEVEL","SET_SHOW_BEST_PATH","START_SOLVING","GO_FULL_SPEED","PAUSE","UNPAUSE","STOP_SOLVING","SET_BEST_PATH","SET_EVALUATING_PATHS","START_DEFINING_POINTS","ADD_DEFINED_POINT","STOP_DEFINING_POINTS","SET_POINT_COUNT","SET_POINTS","SET_DEFAULT_MAP","TOGGLE_SITE_INFO_OPEN","TOGGLE_ALG_INFO_OPEN","getRandomPoint","max","min","Math","random","toggleSiteInfoOpen","type","toggleAlgInfoOpen","setViewportState","viewport","resetEvaluatingStateAction","startSolvingAction","points","delay","evaluatingDetailLevel","fullSpeed","stopSolvingAction","setAlgorithm","algorithm","defaults","dispatch","setAlgorithmAction","setDelay","setEvaluatingDetailLevel","level","setShowBestPath","show","resetSolverState","stopSolving","startSolving","_len","arguments","length","args","Array","_key","getState","pointCount","gtmEmit","event","apply","goFullSpeed","pause","unpause","setEvaluatingPath","path","cost","paths","setEvaluatingPaths","setBestPath","startDefiningPoints","addDefinedPoint","point","stopDefiningPoints","setPointCount","count","setPointCountAction","randomizePoints","bounds","top","bottom","left","right","from","map","_","setPointsAction","setDefaultMap","_arrayLikeToArray","arr","len","arr2","_toConsumableArray","isArray","iter","iterator","minLen","toString","slice","constructor","test","TypeError","pathCost","idx","distance","pt1","pt2","lng1","lat1","lng2","lat2","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","reduce","a","b","counterClockWise","q","EVALUATING_PATH_COLOR","EVALUATING_SEGMENT_COLOR","solver","run","async","self","postMessage","actions","wrapSolver","solverConfig","detailLevel","paused","getPaths","getPath","waitPause","Promise","resolve","setTimeout","sleep","duration","onmessage","data","action","_ref","Error","sp","leftmost","curPoint","selectedIdx","selectedPoint","entries","color","splice","bestRatio","bestPointIdx","insertIdx","Infinity","freeIdx","freePoint","bestCost","bestIdx","pathIdx","pathPoint","nextPathPoint","evalCost","nextPoint","prevCost","ratio","rotateToStartingPoint","startingPoint","startIdx","findIndex","unshift"],"mappings":"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","file":"18ce3098d0c3daadc76c.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"7lWc\");\n","export default ev => {\n  if (typeof window !== \"undefined\" && window.dataLayer) {\n    window.dataLayer.push(ev);\n  } else {\n    console.log(ev);\n  }\n};\n","import gtmEmit from \"./emitCustomEvent\";\nexport const SET_VIEWPORT_STATE = \"SET_VIEWPORT_STATE\";\n\nexport const RESET_EVALUATING_STATE = \"RESET_EVALUATING_STATE\";\nexport const RESET_BEST_PATH_STATE = \"RESET_BEST_PATH_STATE\";\n\nexport const SET_ALGORITHM = \"SET_ALGORITHM\";\nexport const SET_DELAY = \"SET_DELAY\";\nexport const SET_EVALUATING_DETAIL_LEVEL = \"SET_EVALUATING_DETAIL_LEVEL\";\nexport const SET_SHOW_BEST_PATH = \"SET_SHOW_BEST_PATH\";\nexport const START_SOLVING = \"START_SOLVING\";\nexport const GO_FULL_SPEED = \"GO_FULL_SPEED\";\nexport const PAUSE = \"PAUSE\";\nexport const UNPAUSE = \"UNPAUSE\";\nexport const STOP_SOLVING = \"STOP_SOLVING\";\n\nexport const SET_BEST_PATH = \"SET_BEST_PATH\";\nexport const SET_EVALUATING_PATHS = \"SET_EVALUATING_PATHS\";\n\nexport const START_DEFINING_POINTS = \"START_DEFINING_POINTS\";\nexport const ADD_DEFINED_POINT = \"ADD_DEFINED_POINT\";\nexport const STOP_DEFINING_POINTS = \"STOP_DEFINING_POINTS\";\nexport const SET_POINT_COUNT = \"SET_POINT_COUNT\";\nexport const SET_POINTS = \"SET_POINTS\";\nexport const SET_DEFAULT_MAP = \"SET_DEFAULT_MAP\";\n\nexport const TOGGLE_SITE_INFO_OPEN = \"TOGGLE_SITE_INFO_OPEN\";\nexport const TOGGLE_ALG_INFO_OPEN = \"TOGGLE_ALG_INFO_OPEN\";\n\nconst getRandomPoint = (max, min) => Math.random() * (max - min) + min;\n\n//\n// BASIC UI\n//\nexport const toggleSiteInfoOpen = () => ({\n  type: TOGGLE_SITE_INFO_OPEN\n});\n\nexport const toggleAlgInfoOpen = () => ({\n  type: TOGGLE_ALG_INFO_OPEN\n});\n\n//\n// MAP INTERACTION\n//\nexport const setViewportState = viewport => ({\n  type: SET_VIEWPORT_STATE,\n  viewport\n});\n\n//\n// SOLVER CONTROLS\n//\nconst resetEvaluatingStateAction = () => ({\n  type: RESET_EVALUATING_STATE\n});\n\nconst resetBestPathStateAction = () => ({\n  type: RESET_BEST_PATH_STATE\n});\n\nconst setAlgorithmAction = (algorithm, defaults) => ({\n  type: SET_ALGORITHM,\n  algorithm,\n  defaults\n});\n\nexport const startSolvingAction = (points, delay, evaluatingDetailLevel) => ({\n  type: START_SOLVING,\n  points,\n  delay,\n  evaluatingDetailLevel,\n  fullSpeed: false\n});\n\nexport const stopSolvingAction = () => ({\n  type: STOP_SOLVING\n});\n\nexport const setAlgorithm = (algorithm, defaults = {}) => dispatch => {\n  dispatch(resetEvaluatingStateAction());\n  dispatch(setAlgorithmAction(algorithm, defaults));\n};\n\nexport const setDelay = delay => ({\n  type: SET_DELAY,\n  delay\n});\n\nexport const setEvaluatingDetailLevel = level => ({\n  type: SET_EVALUATING_DETAIL_LEVEL,\n  level\n});\n\nexport const setShowBestPath = show => ({\n  type: SET_SHOW_BEST_PATH,\n  show\n});\n\nexport const resetSolverState = () => dispatch => {\n  dispatch(stopSolving());\n  dispatch(resetEvaluatingStateAction());\n  dispatch(resetBestPathStateAction());\n};\n\nexport const startSolving = (...args) => (dispatch, getState) => {\n  const { algorithm, pointCount } = getState();\n  gtmEmit({\n    event: \"start-solving\",\n    algorithm,\n    pointCount\n  });\n  dispatch(resetEvaluatingStateAction());\n  dispatch(startSolvingAction(...args));\n};\n\nexport const goFullSpeed = () => ({\n  type: GO_FULL_SPEED\n});\n\nexport const pause = () => ({\n  type: PAUSE\n});\n\nexport const unpause = () => ({\n  type: UNPAUSE\n});\n\nexport const stopSolving = () => dispatch => {\n  dispatch(resetEvaluatingStateAction());\n  dispatch(stopSolvingAction());\n};\n\n//\n// SOLVER ACTIONS\n//\nexport const setEvaluatingPath = (path, cost) => ({\n  type: SET_EVALUATING_PATHS,\n  paths: [path],\n  cost\n});\n\nexport const setEvaluatingPaths = (paths, cost) => ({\n  type: SET_EVALUATING_PATHS,\n  paths,\n  cost\n});\n\nexport const setBestPath = (path, cost) => ({\n  type: SET_BEST_PATH,\n  path,\n  cost\n});\n\n//\n// POINT CONTROLS\n//\nconst setDefaultMapAction = () => ({\n  type: SET_DEFAULT_MAP\n});\n\nconst setPointsAction = points => ({\n  type: SET_POINTS,\n  points\n});\n\nconst setPointCountAction = count => ({\n  type: SET_POINT_COUNT,\n  count\n});\n\nconst startDefiningPointsAction = () => ({\n  type: START_DEFINING_POINTS\n});\n\nexport const startDefiningPoints = () => dispatch => {\n  dispatch(resetSolverState());\n  dispatch(startDefiningPointsAction());\n};\n\nexport const addDefinedPoint = point => ({\n  type: ADD_DEFINED_POINT,\n  point\n});\n\nexport const stopDefiningPoints = () => ({\n  type: STOP_DEFINING_POINTS\n});\n\nexport const setPointCount = count => dispatch => {\n  dispatch(resetSolverState());\n  dispatch(setPointCountAction(count));\n};\n\nexport const randomizePoints = bounds => (dispatch, getState) => {\n  const { pointCount } = getState();\n  const { top, bottom, left, right } = bounds;\n  const points = Array.from({ length: pointCount }).map(_ => [\n    getRandomPoint(right, left),\n    getRandomPoint(top, bottom)\n  ]);\n  dispatch(resetSolverState());\n  dispatch(setPointsAction(points));\n};\n\nexport const setDefaultMap = (...args) => dispatch => {\n  dispatch(resetSolverState());\n  dispatch(setDefaultMapAction());\n};\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// haversine great circle distance\nexport const distance = (pt1, pt2) => {\n  const [lng1, lat1] = pt1;\n  const [lng2, lat2] = pt2;\n  if (lat1 === lat2 && lng1 === lng2) {\n    return 0;\n  }\n\n  var radlat1 = (Math.PI * lat1) / 180;\n  var radlat2 = (Math.PI * lat2) / 180;\n\n  var theta = lng1 - lng2;\n  var radtheta = (Math.PI * theta) / 180;\n\n  var dist =\n    Math.sin(radlat1) * Math.sin(radlat2) +\n    Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n  if (dist > 1) {\n    dist = 1;\n  }\n  dist = Math.acos(dist);\n  dist = (dist * 180) / Math.PI;\n  return dist * 60 * 1.1515 * 1.609344;\n};\n\nexport const pathCost = path => {\n  return path\n    .slice(0, -1)\n    .map((point, idx) => distance(point, path[idx + 1]))\n    .reduce((a, b) => a + b, 0);\n};\n\nexport const counterClockWise = (p, q, r) => {\n  return (q[0] - p[0]) * (r[1] - q[1]) < (q[1] - p[1]) * (r[0] - q[0]);\n};\n\nexport const intersects = (a, b, c, d) => {\n  return (\n    counterClockWise(a, c, d) !== counterClockWise(b, c, d) &&\n    counterClockWise(a, b, c) !== counterClockWise(a, b, d)\n  );\n};\n\nexport const setDifference = (setA, setB) => {\n  const ret = new Set(setA);\n  setB.forEach(p => {\n    ret.delete(p);\n  });\n  return ret;\n};\n\nexport const rotateToStartingPoint = (path, startingPoint) => {\n  const startIdx = path.findIndex(p => p === startingPoint);\n  path.unshift(...path.splice(startIdx, path.length));\n};\n","// orangish\nexport const START_POINT_COLOR = [255, 87, 34];\n\n// blueish\nexport const POINT_COLOR = [41, 121, 255];\n\n// greenish\nexport const BEST_PATH_COLOR = [76, 175, 80];\n\n// orangish\nexport const EVALUATING_PATH_COLOR = [255, 87, 34, 225];\n\n// reddish\nexport const EVALUATING_ERROR_COLOR = [255, 25, 25, 240];\n\n// greyish\nexport const EVALUATING_SEGMENT_COLOR = [180, 180, 180, 240];\n\nexport const COLOR_MODE_KEY = \"color-mode\";\n","/* eslint-disable no-restricted-globals */\nimport * as actions from \"../store/actions\";\n\nconst wrapSolver = solver => async (...args) => {\n  await solver(...args);\n  self.postMessage(actions.stopSolvingAction());\n};\n\nexport const makeSolver = solver => {\n  const run = wrapSolver(solver);\n\n  self.solverConfig = {\n    detailLevel: 0,\n    delay: 10,\n    fullSpeed: false,\n    paused: false\n  };\n\n  self.setBestPath = (...args) => {\n    self.postMessage(actions.setBestPath(...args));\n  };\n\n  self.setEvaluatingPaths = (getPaths, level = 1) => {\n    if (self.solverConfig.detailLevel >= level) {\n      const { paths, cost } = getPaths();\n      self.postMessage(actions.setEvaluatingPaths(paths, cost));\n    }\n  };\n\n  self.setEvaluatingPath = (getPath, level = 1) => {\n    if (self.solverConfig.detailLevel >= level) {\n      const { path, cost } = getPath();\n      self.postMessage(actions.setEvaluatingPath(path, cost));\n    }\n  };\n\n  self.waitPause = async () => {\n    while (self.solverConfig.paused) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  };\n\n  self.sleep = async () => {\n    if (self.solverConfig.paused) {\n      return await self.waitPause();\n    }\n    const duration = self.solverConfig.fullSpeed\n      ? 0\n      : self.solverConfig.delay || 10;\n    return new Promise(resolve => {\n      setTimeout(resolve, duration);\n    });\n  };\n\n  self.onmessage = async ({ data: action }) => {\n    switch (action.type) {\n      case actions.START_SOLVING:\n        self.solverConfig.delay = action.delay;\n        self.solverConfig.detailLevel = action.evaluatingDetailLevel;\n        self.solverConfig.fullSpeed = action.fullSpeed;\n        run(action.points);\n        break;\n\n      case actions.SET_DELAY:\n        self.solverConfig.delay = action.delay;\n        break;\n\n      case actions.SET_EVALUATING_DETAIL_LEVEL:\n        self.solverConfig.detailLevel = action.level;\n        break;\n\n      case actions.GO_FULL_SPEED:\n        self.solverConfig.evaluatingDetailLevel = 0;\n        self.solverConfig.fullSpeed = true;\n        break;\n\n      case actions.PAUSE:\n        self.solverConfig.paused = true;\n        break;\n\n      case actions.UNPAUSE:\n        self.solverConfig.paused = false;\n        break;\n\n      default:\n        throw new Error(`invalid action sent to solver ${action.type}`);\n    }\n  };\n};\n\nexport default makeSolver;\n","/* eslint-disable no-restricted-globals */\nimport makeSolver from \"../makeSolver\";\nimport { pathCost, counterClockWise, rotateToStartingPoint } from \"../cost\";\nimport {\n  EVALUATING_PATH_COLOR,\n  EVALUATING_SEGMENT_COLOR\n} from \"../../constants\";\n\nconst convexHull = async points => {\n  const sp = points[0];\n\n  // Find the \"left most point\"\n  let leftmost = points[0];\n  for (const p of points) {\n    if (p[1] < leftmost[1]) {\n      leftmost = p;\n    }\n  }\n\n  const path = [leftmost];\n\n  while (true) {\n    const curPoint = path[path.length - 1];\n    let [selectedIdx, selectedPoint] = [0, null];\n\n    // find the \"most counterclockwise\" point\n    for (let [idx, p] of points.entries()) {\n      // eslint-disable-next-line\n      self.setEvaluatingPaths(\n        () => ({\n          paths: [\n            {\n              path: [...path, selectedPoint || curPoint],\n              color: EVALUATING_SEGMENT_COLOR\n            },\n            { path: [curPoint, p], color: EVALUATING_PATH_COLOR }\n          ]\n        }),\n        2\n      );\n      await self.sleep();\n\n      if (!selectedPoint || counterClockWise(curPoint, p, selectedPoint)) {\n        // this point is counterclockwise with respect to the current hull\n        // and selected point (e.g. more counterclockwise)\n        [selectedIdx, selectedPoint] = [idx, p];\n      }\n    }\n\n    // adding this to the hull so it's no longer available\n    points.splice(selectedIdx, 1);\n\n    // back to the furthest left point, formed a cycle, break\n    if (selectedPoint === leftmost) {\n      break;\n    }\n\n    // add to hull\n    path.push(selectedPoint);\n  }\n\n  self.setEvaluatingPaths(() => ({\n    paths: [{ path, color: EVALUATING_PATH_COLOR }],\n    cost: pathCost(path)\n  }));\n  await self.sleep();\n\n  while (points.length > 0) {\n    let [bestRatio, bestPointIdx, insertIdx] = [Infinity, null, 0];\n\n    for (let [freeIdx, freePoint] of points.entries()) {\n      // for every free point, find the point in the current path\n      // that minimizes the cost of adding the path minus the cost of\n      // the original segment\n      let [bestCost, bestIdx] = [Infinity, 0];\n      for (let [pathIdx, pathPoint] of path.entries()) {\n        const nextPathPoint = path[(pathIdx + 1) % path.length];\n\n        // the new cost minus the old cost\n        const evalCost =\n          pathCost([pathPoint, freePoint, nextPathPoint]) -\n          pathCost([pathPoint, nextPathPoint]);\n\n        if (evalCost < bestCost) {\n          [bestCost, bestIdx] = [evalCost, pathIdx];\n        }\n      }\n\n      // figure out how \"much\" more expensive this is with respect to the\n      // overall length of the segment\n      const nextPoint = path[(bestIdx + 1) % path.length];\n      const prevCost = pathCost([path[bestIdx], nextPoint]);\n      const newCost = pathCost([path[bestIdx], freePoint, nextPoint]);\n      const ratio = newCost / prevCost;\n\n      if (ratio < bestRatio) {\n        [bestRatio, bestPointIdx, insertIdx] = [ratio, freeIdx, bestIdx + 1];\n      }\n    }\n\n    const [nextPoint] = points.splice(bestPointIdx, 1);\n    path.splice(insertIdx, 0, nextPoint);\n\n    self.setEvaluatingPaths(() => ({\n      paths: [{ path }],\n      cost: pathCost(path)\n    }));\n    await self.sleep();\n  }\n\n  // rotate the array so that starting point is back first\n  rotateToStartingPoint(path, sp);\n\n  // go back home\n  path.push(sp);\n  const cost = pathCost(path);\n\n  self.setEvaluatingPaths(() => ({\n    paths: [{ path }],\n    cost\n  }));\n  self.setBestPath(path, cost);\n};\n\nmakeSolver(convexHull);\n"],"sourceRoot":""}